Leia tudo.
Meus requisito, meu banco de dados, meu back end
O back end atende todos os requisitos?
 

### **1. Administrador**

O **Administrador** tem um controle completo sobre o sistema. Suas responsabilidades incluem a gestão de usuários, turmas, disciplinas e o acompanhamento do desempenho dos alunos. 

#### **Ações Detalhadas:**

1. **Cadastrar Usuários (Alunos, Professores, Coordenadores, Administradores):**
   - **Como:** O Administrador acessa a interface para cadastrar novos usuários. Preenche os campos obrigatórios, como nome completo, e-mail, senha, telefone, foto e o tipo de usuário (Aluno, Professor, Coordenador ou Administrador).
   - **Banco de Dados:** As informações são inseridas na tabela usuarios, com a inserção de dados como nome_completo, email, senha, tipo_usuario, telefone, foto_url, e o campo status (Ativo/Inativo).
   - **Exemplo de comando:** 
 
     INSERT INTO usuarios (nome_completo, email, senha, tipo_usuario, status) 
     VALUES ('João Silva', 'joao@email.com', 'senha123', 'Professor', 'Ativo');


2. **Cadastrar Turmas:**
   - **Como:** O Administrador cria turmas e define o turno (Manhã, Tarde ou Noite). Ele escolhe um nome para a turma.
   - **Banco de Dados:** As informações são armazenadas na tabela turmas, incluindo o nome da turma e o turno.
   - **Exemplo de comando:**
 
     INSERT INTO turmas (nome_turma, turno) 
     VALUES ('Turma A', 'Manhã');


3. **Cadastrar Disciplinas:**
   - **Como:** O Administrador cria novas disciplinas no sistema, atribuindo um nome a cada uma delas.
   - **Banco de Dados:** As informações são registradas na tabela disciplinas.
   - **Exemplo de comando:**
 
     INSERT INTO disciplinas (nome_disciplina) 
     VALUES ('Matemática');


4. **Associar Alunos a Turmas:**
   - **Como:** O Administrador associa alunos às turmas, usando a tabela alunos_turma.
   - **Banco de Dados:** Ele seleciona o aluno e a turma para associá-los.
   - **Exemplo de comando:**
 
     INSERT INTO alunos_turma (id_aluno, id_turma) 
     VALUES (1, 2);  -- Associa o aluno de id 1 à turma de id 2


5. **Associar Professores a Turmas e Disciplinas:**
   - **Como:** O Administrador associa professores a turmas e disciplinas, usando as tabelas professores_turma e professores_disciplina.
   - **Banco de Dados:** Ele seleciona o professor, a turma e a disciplina para associá-los.
   - **Exemplo de comando:**
 
     INSERT INTO professores_turma (id_professor, id_turma) 
     VALUES (3, 2);  -- Associa o professor de id 3 à turma de id 2


6. **Gerar Relatórios de Desempenho:**
   - **Como:** O Administrador pode visualizar relatórios de desempenho dos alunos em turmas e disciplinas específicas.
   - **Banco de Dados:** O relatório é gerado a partir da tabela desempenho e/ou relatorios_desempenho, consultando as notas e feedbacks de atividades.
   - **Exemplo de comando:**
 
     SELECT * FROM desempenho WHERE id_turma = 2 AND id_disciplina = 1;


7. **Visualizar Desempenho dos Alunos:**
   - **Como:** O Administrador pode acessar as notas e feedbacks dos alunos em suas atividades.
   - **Banco de Dados:** A tabela desempenho armazena as notas e feedbacks, que podem ser consultados pelo Administrador.
   - **Exemplo de comando:**
 
     SELECT id_aluno, nota, feedback_professor FROM desempenho WHERE id_disciplina = 1;


8. **Visualizar Atividades e Registros de Entregas:**
   - **Como:** O Administrador pode visualizar todas as atividades e os registros de entrega feitos pelos alunos.
   - **Banco de Dados:** A consulta pode ser feita nas tabelas atividades e registros_atividade.
   - **Exemplo de comando:**
 
     SELECT * FROM atividades WHERE id_turma = 2;


---

### **2. Professor**

O **Professor** tem acesso à criação de atividades, correção de atividades, atribuição de notas e feedbacks, e acompanhamento do desempenho dos alunos.

#### **Ações Detalhadas:**

1. **Exibir Disciplinas e Turmas Associadas:**
   - **Como:** O Professor visualiza as turmas e disciplinas em que ele está vinculado, através das tabelas professores_turma e professores_disciplina.
   - **Banco de Dados:** O sistema filtra as turmas e disciplinas com base na associação do professor.
   - **Exemplo de comando:**
 
     SELECT * FROM professores_turma WHERE id_professor = 3;  -- Visualiza as turmas associadas ao professor


2. **Criar Atividades:**
   - **Como:** O Professor cria atividades, associando-as a uma turma e uma disciplina, e define o grau de dificuldade.
   - **Banco de Dados:** As atividades são registradas na tabela atividades, incluindo título, descrição, data de entrega e grau de dificuldade.
   - **Exemplo de comando:**
 
     INSERT INTO atividades (id_disciplina, id_turma, id_professor, titulo, descricao, data_atividade, dificuldade)
     VALUES (1, 2, 3, 'Prova de Matemática', 'Descrição da prova', '2024-12-20', 'Difícil');


3. **Exibir Atividades Criadas:**
   - **Como:** O Professor pode visualizar todas as atividades que ele criou, filtradas por turma e disciplina.
   - **Banco de Dados:** As atividades são consultadas na tabela atividades.
   - **Exemplo de comando:**
 
     SELECT * FROM atividades WHERE id_professor = 3;


4. **Atribuir Notas e Feedback nas Atividades:**
   - **Como:** O Professor corrige as atividades dos alunos, atribuindo notas e fornecendo feedback.
   - **Banco de Dados:** As notas e feedbacks são registrados na tabela desempenho.
   - **Exemplo de comando:**
 
     INSERT INTO desempenho (id_aluno, id_disciplina, id_atividade, nota, feedback_professor)
     VALUES (1, 1, 1, 9.0, 'Bom trabalho');


5. **Visualizar Registros de Atividades Entregues:**
   - **Como:** O Professor visualiza as entregas feitas pelos alunos, verificando comentários de dificuldade e feedback.
   - **Banco de Dados:** As entregas dos alunos são registradas na tabela registros_atividade.
   - **Exemplo de comando:**
 
     SELECT * FROM registros_atividade WHERE id_atividade = 1;


6. **Visualizar Desempenho dos Alunos nas Atividades:**
   - **Como:** O Professor visualiza o desempenho dos alunos nas atividades entregues.
   - **Banco de Dados:** O desempenho dos alunos é armazenado na tabela desempenho.
   - **Exemplo de comando:**
 
     SELECT * FROM desempenho WHERE id_atividade = 1;


---

### **3. Aluno**

O **Aluno** pode se concentrar nas atividades, entrega de tarefas e visualização do seu desempenho.

#### **Ações Detalhadas:**

1. **Participar de Atividades Associadas à Sua Turma:**
   - **Como:** O Aluno acessa as atividades associadas à sua turma, que são filtradas pelo sistema.
   - **Banco de Dados:** O sistema consulta a tabela alunos_turma para obter as turmas do aluno e, em seguida, exibe as atividades relacionadas.
   - **Exemplo de comando:**
 
     SELECT * FROM atividades WHERE id_turma IN (SELECT id_turma FROM alunos_turma WHERE id_aluno = 1);


2. **Postar (Entregar) Atividades:**
   - **Como:** O Aluno entrega suas atividades, anexando arquivos, selecionando o grau de dificuldade e adicionando um comentário.
   - **Banco de Dados:** A entrega é registrada na tabela registros_atividade, incluindo o arquivo anexado, dificuldade e comentário.
   - **Exemplo de comando:**
 
     INSERT INTO registros_atividade (id_atividade, id_aluno, grau_dificuldade, comentario_dificuldade, tempo_gasto, anexo_atividade)
     VALUES (1, 1, 'Médio', 'Achei a atividade moderada', 30, 'atividade.pdf');


3. **Visualizar Atividades Pendentes:**
   - **Como:** O Aluno pode visualizar as atividades que ainda precisa entregar.
   - **Banco de Dados:** O sistema consulta as atividades da turma e filtra as que ainda estão pendentes.
   - **Exemplo de comando:**
 
     SELECT * FROM atividades WHERE id_turma IN (SELECT id_turma FROM alunos_turma WHERE id_aluno = 1) AND id_atividade NOT IN (SELECT id_atividade FROM registros_atividade WHERE id_aluno = 1);


4. **Visualizar Atividades Entregues:**
   - **Como:** O Aluno pode ver as atividades já entregues, incluindo o feedback e a nota do professor.
   - **Banco de Dados:** O sistema consulta a tabela registros_atividade para mostrar as entregas feitas.
   - **Exemplo de comando:**
 
     SELECT * FROM registros_atividade WHERE id_aluno = 1;


5. **Visualizar Desempenho nas Atividades:**
   - **Como:** O Aluno pode ver as notas e o feedback recebido em suas atividades.
   - **Banco de Dados:** O desempenho é consultado na tabela desempenho.
   - **Exemplo de comando:**
 


     SELECT * FROM desempenho WHERE id_aluno = 1;




-- Tabela de usuários
CREATE TABLE alunos_turma (
  id_aluno_turma int(11) NOT NULL AUTO_INCREMENT,
  id_aluno int(11) DEFAULT NULL,
  id_turma int(11) DEFAULT NULL,
  PRIMARY KEY (id_aluno_turma),
  UNIQUE KEY id_aluno (id_aluno,id_turma),
  KEY id_turma (id_turma),
  CONSTRAINT alunos_turma_ibfk_1 FOREIGN KEY (id_aluno) REFERENCES usuarios (id_usuario) ON DELETE CASCADE,
  CONSTRAINT alunos_turma_ibfk_2 FOREIGN KEY (id_turma) REFERENCES turmas (id_turma) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE atividades (
  id_atividade int(11) NOT NULL AUTO_INCREMENT,
  id_disciplina int(11) DEFAULT NULL,
  id_turma int(11) DEFAULT NULL,
  id_professor int(11) DEFAULT NULL,
  titulo varchar(255) NOT NULL,
  descricao text NOT NULL,
  data_atividade date NOT NULL,
  dificuldade enum('Fácil','Médio','Difícil') NOT NULL,
  data_criacao timestamp NULL DEFAULT current_timestamp(),
  PRIMARY KEY (id_atividade),
  KEY id_disciplina (id_disciplina),
  KEY id_turma (id_turma),
  KEY id_professor (id_professor),
  CONSTRAINT atividades_ibfk_1 FOREIGN KEY (id_disciplina) REFERENCES disciplinas (id_disciplina) ON DELETE CASCADE,
  CONSTRAINT atividades_ibfk_2 FOREIGN KEY (id_turma) REFERENCES turmas (id_turma) ON DELETE CASCADE,
  CONSTRAINT atividades_ibfk_3 FOREIGN KEY (id_professor) REFERENCES usuarios (id_usuario) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE desempenho (
  id_desempenho int(11) NOT NULL AUTO_INCREMENT,
  id_aluno int(11) DEFAULT NULL,
  id_disciplina int(11) DEFAULT NULL,
  id_atividade int(11) DEFAULT NULL,
  nota decimal(5,2) DEFAULT NULL,
  feedback_professor text DEFAULT NULL,
  data_registro timestamp NULL DEFAULT current_timestamp(),
  PRIMARY KEY (id_desempenho),
  KEY id_aluno (id_aluno),
  KEY id_disciplina (id_disciplina),
  KEY id_atividade (id_atividade),
  CONSTRAINT desempenho_ibfk_1 FOREIGN KEY (id_aluno) REFERENCES usuarios (id_usuario) ON DELETE CASCADE,
  CONSTRAINT desempenho_ibfk_2 FOREIGN KEY (id_disciplina) REFERENCES disciplinas (id_disciplina) ON DELETE CASCADE,
  CONSTRAINT desempenho_ibfk_3 FOREIGN KEY (id_atividade) REFERENCES atividades (id_atividade) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE disciplinas (
  id_disciplina int(11) NOT NULL AUTO_INCREMENT,
  nome_disciplina varchar(255) NOT NULL,
  PRIMARY KEY (id_disciplina)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE professores_disciplina (
  id_professor_disciplina int(11) NOT NULL AUTO_INCREMENT,
  id_professor int(11) DEFAULT NULL,
  id_disciplina int(11) DEFAULT NULL,
  PRIMARY KEY (id_professor_disciplina),
  UNIQUE KEY id_professor (id_professor,id_disciplina),
  KEY id_disciplina (id_disciplina),
  CONSTRAINT professores_disciplina_ibfk_1 FOREIGN KEY (id_professor) REFERENCES usuarios (id_usuario) ON DELETE CASCADE,
  CONSTRAINT professores_disciplina_ibfk_2 FOREIGN KEY (id_disciplina) REFERENCES disciplinas (id_disciplina) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE professores_turma (
  id_professor_turma int(11) NOT NULL AUTO_INCREMENT,
  id_professor int(11) DEFAULT NULL,
  id_turma int(11) DEFAULT NULL,
  PRIMARY KEY (id_professor_turma),
  UNIQUE KEY id_professor (id_professor,id_turma),
  KEY id_turma (id_turma),
  CONSTRAINT professores_turma_ibfk_1 FOREIGN KEY (id_professor) REFERENCES usuarios (id_usuario) ON DELETE CASCADE,
  CONSTRAINT professores_turma_ibfk_2 FOREIGN KEY (id_turma) REFERENCES turmas (id_turma) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE registros_atividade (
  id_registro int(11) NOT NULL AUTO_INCREMENT,
  id_atividade int(11) DEFAULT NULL,
  id_aluno int(11) DEFAULT NULL,
  id_disciplina int(11) DEFAULT NULL,
  grau_dificuldade enum('Baixa','Moderada','Alta') NOT NULL,
  comentario_dificuldade text DEFAULT NULL,
  tempo_gasto int(11) DEFAULT NULL,
  feedback_professor text DEFAULT NULL,
  anexo_atividade varchar(255) DEFAULT NULL,
  data_entrega timestamp NULL DEFAULT current_timestamp(),
  PRIMARY KEY (id_registro),
  KEY id_atividade (id_atividade),
  KEY id_aluno (id_aluno),
  KEY id_disciplina (id_disciplina),
  CONSTRAINT registros_atividade_ibfk_1 FOREIGN KEY (id_atividade) REFERENCES atividades (id_atividade) ON DELETE CASCADE,
  CONSTRAINT registros_atividade_ibfk_2 FOREIGN KEY (id_aluno) REFERENCES usuarios (id_usuario) ON DELETE CASCADE,
  CONSTRAINT registros_atividade_ibfk_3 FOREIGN KEY (id_disciplina) REFERENCES disciplinas (id_disciplina) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE turmas (
  id_turma int(11) NOT NULL AUTO_INCREMENT,
  nome_turma varchar(100) NOT NULL,
  turno enum('Manhã','Tarde','Noite') NOT NULL,
  data_criacao timestamp NULL DEFAULT current_timestamp(),
  PRIMARY KEY (id_turma)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE usuarios (
  id_usuario int(11) NOT NULL AUTO_INCREMENT,
  nome_completo varchar(255) NOT NULL,
  email varchar(255) NOT NULL,
  senha varchar(255) NOT NULL,
  telefone varchar(15) DEFAULT NULL,
  foto_url varchar(255) DEFAULT NULL,
  sexo enum('Masculino','Feminino','Outro','Não informar') DEFAULT 'Não informar',
  tipo_usuario enum('Aluno','Professor','Coordenador','Administrador') NOT NULL DEFAULT 'Aluno',
  status enum('Ativo','Inativo') DEFAULT 'Ativo',
  data_criacao timestamp NULL DEFAULT current_timestamp(),
  PRIMARY KEY (id_usuario),
  UNIQUE KEY email (email)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
